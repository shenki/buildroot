From 3cb6a5675325b1f4005419518ec982fc07a99ae2 Mon Sep 17 00:00:00 2001
From: Joel Stanley <joel@jms.id.au>
Date: Wed, 12 Sep 2018 15:22:48 +0930
Subject: [PATCH 2/2] Allow disabling of dbus interface

This introduces DBUS_CONTROL_ENABLED which allows the compile time
removal of the sdbus dependency.

It introduces the configure option:

  --enable-dbus           Enable D-Bus interface and tool for controlling the
                          daemon [default=yes]

Change-Id: I2bd701b8314e7c96d38c570363daca9f8292ef5f
Signed-off-by: Joel Stanley <joel@jms.id.au>
---
 Makefile.am  | 20 +++++++++++++-------
 configure.ac | 15 ++++++++++++++-
 mbox.h       | 11 +++++++++--
 mboxd.c      | 15 +++++++++++++++
 4 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 5e1214753ae1..fbcb5a7908b5 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1,12 +1,10 @@
 ACLOCAL_AMFLAGS = -I m4
-sbin_PROGRAMS = mboxd mboxctl
+sbin_PROGRAMS = mboxd
 
 mboxd_SOURCES = \
 	mboxd.c \
 	common.c \
 	control.c \
-	control_legacy.c \
-	control_dbus.c \
 	lpc.c \
 	mboxd_msg.c \
 	windows.c \
@@ -14,6 +12,18 @@ mboxd_SOURCES = \
 mboxd_LDFLAGS = $(LIBSYSTEMD_LIBS)
 mboxd_CFLAGS = $(LIBSYSTEMD_CFLAGS)
 
+if DBUS_INTERFACE_ENABLED
+mboxd_SOURCES += \
+	control_legacy.c \
+	control_dbus.c
+
+sbin_PROGRAMS += mboxctl
+
+mboxctl_SOURCES = mboxctl.c
+mboxctl_LDFLAGS = $(LIBSYSTEMD_LIBS)
+mboxctl_CFLAGS = $(LIBSYSTEMD_CFLAGS)
+endif
+
 if VIRTUAL_PNOR_ENABLED
 include vpnor/Makefile.am.include
 else
@@ -21,10 +31,6 @@ mboxd_SOURCES += flash.c \
 	lpc_reset.c
 endif
 
-mboxctl_SOURCES = mboxctl.c
-mboxctl_LDFLAGS = $(LIBSYSTEMD_LIBS)
-mboxctl_CFLAGS = $(LIBSYSTEMD_CFLAGS)
-
 @CODE_COVERAGE_RULES@
 
 check_PROGRAMS =
diff --git a/configure.ac b/configure.ac
index 27ecaf3e823d..5374e104ce29 100644
--- a/configure.ac
+++ b/configure.ac
@@ -28,6 +28,20 @@ AX_APPEND_COMPILE_FLAGS([-fpic -Wall], [CXXFLAGS])
 # Checks for library functions.
 LT_INIT # Removes 'unrecognized options: --with-libtool-sysroot'
 
+AC_ARG_ENABLE([dbus],
+    AS_HELP_STRING([--enable-dbus], [Enable D-Bus interface and tool for controlling the daemon [default=yes]])
+)
+AS_IF([test "x$enable_dbus" == "xno"],
+    [
+        AM_CONDITIONAL(DBUS_INTERFACE_ENABLED, false)
+    ],
+    [
+        AM_CONDITIONAL(DBUS_INTERFACE_ENABLED, true)
+        AX_APPEND_COMPILE_FLAGS([-DDBUS_INTERFACE_ENABLED], [CFLAGS])
+        PKG_CHECK_MODULES(LIBSYSTEMD, libsystemd, , AC_MSG_ERROR([libsytemd not found]))
+    ]
+)
+
 AC_ARG_ENABLE([oe-sdk],
     AS_HELP_STRING([--enable-oe-sdk], [Link testcases absolutely against OE SDK so they can be ran within it.])
 )
@@ -71,7 +85,6 @@ AS_IF([test "x$enable_virtual_pnor" == "xyes"],
 
 AX_CODE_COVERAGE
 
-PKG_CHECK_MODULES(LIBSYSTEMD, libsystemd, , AC_MSG_ERROR([libsytemd not found]))
 AC_SUBST([LIBSYSTEMD_CFLAGS])
 AC_SUBST([LIBSYSTEMD_LIBS])
 
diff --git a/mbox.h b/mbox.h
index 19d0a3ff10fd..eb0fdf1b130b 100644
--- a/mbox.h
+++ b/mbox.h
@@ -5,9 +5,14 @@
 #define MBOX_H
 
 #include <mtd/mtd-abi.h>
-#include <systemd/sd-bus.h>
 #include <poll.h>
 #include <stdbool.h>
+#include <stdint.h>
+
+#ifdef DBUS_INTERFACE_ENABLED
+#include <systemd/sd-bus.h>
+#endif
+
 #include "vpnor/mboxd_pnor_partition_table.h"
 
 enum api_version {
@@ -140,10 +145,12 @@ struct mbox_context {
 	enum mbox_state state;
 	enum api_version version;
 	struct pollfd fds[TOTAL_FDS];
-	sd_bus *bus;
 	bool terminate;
 	uint8_t bmc_events;
 	uint8_t prev_seq;
+#ifdef DBUS_INTERFACE_ENABLED
+	sd_bus *bus;
+#endif
 
 /* Command Dispatch */
 	const mboxd_mbox_handler *handlers;
diff --git a/mboxd.c b/mboxd.c
index 0b1357a0e42e..5f83575b7fef 100644
--- a/mboxd.c
+++ b/mboxd.c
@@ -24,7 +24,10 @@
 #include <time.h>
 #include <unistd.h>
 #include <inttypes.h>
+
+#ifdef DBUS_INTERFACE_ENABLED
 #include <systemd/sd-bus.h>
+#endif
 
 #include "config.h"
 #include "mbox.h"
@@ -50,6 +53,7 @@
 "\t\t\t\t(default: 1MB)\n" \
 "\t-f | --flash\t\tSize of flash in [K|M] bytes\n\n"
 
+#ifdef DBUS_INTERFACE_ENABLED
 static int dbus_init(struct mbox_context *context)
 {
 	int rc;
@@ -101,6 +105,15 @@ static void dbus_free(struct mbox_context *context)
 	control_legacy_free(context);
 	sd_bus_unref(context->bus);
 }
+#else
+static void dbus_free(struct mbox_context *context)
+{
+}
+static int dbus_init(struct mbox_context *context)
+{
+	return 0;
+}
+#endif
 
 static int poll_loop(struct mbox_context *context)
 {
@@ -154,6 +167,7 @@ static int poll_loop(struct mbox_context *context)
 				break;
 			}
 		}
+#ifdef DBUS_INTERFACE_ENABLED
 		if (context->fds[DBUS_FD].revents & POLLIN) { /* DBUS */
 			while ((rc = sd_bus_process(context->bus, NULL)) > 0) {
 				MSG_DBG("DBUS Event\n");
@@ -163,6 +177,7 @@ static int poll_loop(struct mbox_context *context)
 						strerror(-rc));
 			}
 		}
+#endif
 		if (context->terminate) {
 			break; /* This should mean we clean up nicely */
 		}
-- 
2.17.1

